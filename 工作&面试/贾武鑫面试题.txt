事务特性（4种）:

	原子性 （atomicity）:强调事务的不可分割.

	一致性 （consistency）:事务的执行的前后数据的完整性保持一致.

	隔离性 （isolation）:一个事务执行的过程中,不应该受到其他事务的干扰

	持久性（durability） :事务一旦结束,数据就持久到数据库



分布式事务 CAP定理

	CAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足一下3个属性：

	一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)
	可用性(Availability) ： 每个操作都必须以可预期的响应结束
	分区容错性(Partition tolerance) ： 即使出现单个组件无法可用,操作依然可以完成

	一般来说，分布式事务的实现主要有以下 5 种方案：

	XA 方案
	TCC 方案
	本地消息表
	可靠消息最终一致性方案
	最大努力通知方案

你们公司是如何处理分布式事务的？
	如果你真的被问到，可以这么说，我们某某特别严格的场景，用的是 TCC 来保证强一致性；然后其他的一些场景基于阿里的 RocketMQ 来实现分布式事务。

	你找一个严格资金要求绝对不能错的场景，你可以说你是用的 TCC 方案；如果是一般的分布式事务场景，订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案。

	友情提示一下，RocketMQ 3.2.6 之前的版本，是可以按照上面的思路来的，但是之后接口做了一些改变，我这里不再赘述了。

	当然如果你愿意，你可以参考可靠消息最终一致性方案来自己实现一套分布式事务，比如基于 RocketMQ 来玩儿。


事务的并发问题

	事务隔离级别：

	为了解决数据库事务并发运行时的各种问题数据库系统提供四种事务隔离级别：
	1. Serializable 串行化
	2. Repeatable Read 可重复读
	3. Read Commited 可读已提交
	4. Read Uncommited 可读未提交

大量数据插入

分析sql不走索引

springBoot 动态打jar